#!/usr/bin/env node
'use strict';

var path = require('path');
var fs = require('fs');
var envFile = path.join(__dirname, '../.env');
try {
  fs.accessSync(envFile, fs.F_OK);
  console.log("loading .env file");
  require('dotenv').config({path: envFile});
} catch (e) {
  // no env file
}

var app = require('../app/app'),
    debug = require('debug')('reviewbot:server'),
    http = require('http'),
    port, server;

/**
 * Normalize a port into a number, string, or false.
 * @param {int} val
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    } else if (port >= 0) {
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {object} error
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address(),
        bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
    debug('Listening on ' + bind);
}

/**
 * Get this party started :)
 */
port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
